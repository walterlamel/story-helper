name: Deploy on Serve
run-name: ${{ github.actor }} lance le deploiement
on:
  push:
    branches:
      - master

env:
  NODE_VERSION: "16"
  NAME_ARTIFICAT: "api-story-build"
  REMOTE_TARGET: /home/debianftp/www/api-story-helper

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Set up node
        uses: actions/setup-node@master
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - run: cd api-story-idea

      - run: npm install -D @types/node

      - name: Build
        run: node ace build --production

      - name: Get .env
        run: cp .env.production build/.env

      - name: create artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.NAME_ARTIFICAT }}
          path: build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: checkout node
        uses: actions/checkout@master

      - name: checkout 2
        uses: actions/setup-node@master
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.NAME_ARTIFICAT }}
          path: ./build

      - name: Deploy to Staging server
        uses: easingthemes/ssh-deploy@v2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: "-rltgoDzvO --delete"
          SOURCE: build/
          REMOTE_HOST: ${{ secrets.HOST }}
          REMOTE_USER: ${{ secrets.USER }}
          REMOTE_PORT: ${{ secrets.PORT }}
          TARGET: ${{ env.REMOTE_TARGET }}

  runserver:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: checkout 2
        uses: actions/setup-node@master
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: ssh actions
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            cd /home/debianftp/www/api-user
            npm ci --production
            node server.js
